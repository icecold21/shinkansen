#!/usr/bin/env ruby

require "rubygems"
require "commander"
require "json"
require "pry"

class Shinkansen
  include Commander::Methods
  # include whatever modules you need

  attr_accessor :root_path, :config_name, :config_folder, :artifact_file, :artifact_folder, :config

  def initialize
    self.config_name      = 'config.json'
    self.config_folder    = '.shinkansen'
    self.artifact_file    = 'artifact.zip'
    self.artifact_folder  = 'artifact'
  end

  def get_config_folder
    self.config_folder
  end

  def get_config_file_path
    "#{self.config_folder}/#{self.config_name}"
  end

  def get_artifact_folder_path
    "#{self.config_folder}/#{self.artifact_folder}"
  end

  def get_artifact_file_path
    "#{self.config_folder}/#{self.artifact_file}"
  end

  def get_environment_variables_path
    "#{self.config_folder}/envvars"
  end

  def get_environment_variables_override_path
    "#{self.config_folder}/envvars_override"
  end

  def execute_git_pull_cmd
    say "Running git pull..."
    git_pull_message = system("git pull`")
    say git_pull_message
    if git_pull_message.include("files changed")
      return true
    else
      raise "Git Error"
    end
  end

  def create_deploy_artifact_data
    system "cd #{get_artifact_folder_path} && rm -rf ."
    system "git archive --verbose --format=tar HEAD | (cd #{get_artifact_folder_path} && tar xf -)"
  end

  def export_environment_variables
    environment_variables = system "eb printenv".split("\n")
    environment_variables.shift

    File.open(get_environment_variables_path, 'w') { |file|
      file.write(
        envrionment_variables.map do |environment_variable|
          "export #{environment_variable.gsub(/\s+/, '')}"
        end.join("\n")
      )
    }
  end

  def run_asset_precompile(version, message)
    run_bundle_install
    say system "source #{get_environment_variables_path} && source #{get_environment_variables_override_path} && cd #{get_artifact_folder_path} && bundle exec rspec rake assets:precompile RAILS_ENV=production"
    setup_git(version, message)
    deploy_application(version)
  end

  def deploy_application(version)
    say system("eb deploy --label #{version} --quiet")
  end

  def setup_git(version, message)
    say system "cd #{get_artifact_folder_path} && git init"
    say system "cd #{get_artifact_folder_path} && git add ."
    say system "cd #{get_artifact_folder_path} && git commit -m 'Deploy'"
    say system "cd #{get_artifact_folder_path} && git tag -a '#{version}' -m '#{message}'"
  end

  def run_bundle_install
    say system "cd #{get_artifact_folder_path} && bundle install"
  end

  def read_config_file
    if Pathname.new(get_config_file_path).exist?
      self.config = JSON.parse(File.read(get_config_file_path))
      return true
    end
    return false
  end

  def run
    program :name, "Shinkansen"
    program :version, "0.0.1"
    program :description, "Bullet Train"
    program :help, "Configuration", "is located in #{get_config_file_path}"
    program :help, "Author", "Jonathan Wylliem <jonathan.wylliem@jurnal.id>"

    command :deploy do |c|
      c.syntax = "shinkansen deploy [options]"
      c.summary = "deploy"
      c.description = "Deploy using shinkansen"
      # c.example "shin deploy --version Version  --message Message", "command example"
      # c.example "shin deploy --skip-compilation", "command example"
      c.option '--version STRING', String, 'Define deployment version'
      c.option '--message STRING', String, 'Define deployment message'
      c.action do |args, options|
        if !read_config_file
          say "Shinkansen has not been initialized. Please run `shin init` first."
          return 0
        end

        if options.version.blank?
          say "Deployment version is not defined. Use --version flag to define it."
          return 0
        end

        if options.message.blank?
          say "Deployment message is not defined. Use --message flag to define it."
          return 0
        end

        if execute_git_pull_cmd && create_deploy_artifact_data && export_environment_variables && run_asset_precompile
          say "Deploying Elasticbeanstalk Application."
        end
      end
    end

    command :init do |c|
      c.syntax = "shinkansen init"
      c.summary = "initialize"
      c.description = "Initializing Shinkansen project"
      c.action do |args, options|
        if read_config_file
          say "Shinkansen project existed in current directory..."
          initialize_project = agree("Do you want to override current setting? (yes, no)")
        end

        if initialize_project != false
          say "Initializing Shinkansen project..."

          setting = Hash.new.tap do |h|
            h["application_name"]      = ask("Application Name:  ")
            h["application_directory"] = ask("Application Directory:  ")
          end
          system "rm -rf #{get_config_folder} && mkdir -p #{get_config_folder}"
          system "echo '#{setting.to_json}' > #{get_config_file_path}"
          system "touch #{get_environment_variables_override_path}"
          say "Shinkansen project initialized!"
          say "Change #{get_environment_variables_override_path} to override environment variables."
        end
      end
    end

    run!
  end
end

Shinkansen.new.run if $0 == __FILE__
