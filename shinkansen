#!/usr/bin/env ruby

require "rubygems"
require "commander"
require "json"
require "pry"
require "pathname"

class Shinkansen
  include Commander::Methods
  # include whatever modules you need

  attr_accessor :root_path, :config_name, :config_folder, :artifact_file, :artifact_folder, :config, :previous_envvars, :process_lock_name

  def initialize
    self.config_name       = 'config.json'
    self.config_folder     = '.shinkansen'
    self.artifact_file     = 'artifact.zip'
    self.artifact_folder   = 'artifact'
    self.process_lock_name = 'process.pid'
  end

  def get_config_folder
    self.config_folder
  end

  def get_config_file_path
    "#{self.config_folder}/#{self.config_name}"
  end

  def get_process_lock_path
    "#{self.config_folder}/#{self.process_lock_name}"
  end

  def get_artifact_folder_path
    "#{self.config_folder}/#{self.artifact_folder}"
  end

  def get_artifact_file_path
    "#{self.config_folder}/#{self.artifact_file}"
  end

  def get_environment_variables_path
    "#{self.config_folder}/envvars"
  end

  def get_environment_variables_override_path
    "#{self.config_folder}/envvars_override"
  end

  def execute_git_pull_cmd
    say "Running git pull..."
    begin
      git_pull_message = `git pull`
    rescue
      say "Git pull error"
      return false
    end
    say git_pull_message
    if git_pull_message.include?("files changed") || git_pull_message.include?("file changed")
      return true
    elsif git_pull_message.include?("Already up-to-date")
      return true if agree("Code already up-to-date. Do you wish to redeploy? (yes, no)")
      return false
    else
      puts "Git pull error"
      return false
    end
  end

  def create_deploy_artifact_data
    say "Creating deploy artifact"
    %x[#{"rm -rf #{get_artifact_folder_path} && mkdir #{get_artifact_folder_path}"}]
    %x[#{"git archive --verbose --format=tar HEAD | (cd #{get_artifact_folder_path} && tar xf -)"}]
  end

  def revert_environment_variables
    if self.previous_envvars.is_a?(Hash)
      self.previous_envvars.each do |k, v|
        ENV[k] = v
      end
    end
    return true
  end

  def export_environment_variables
    say "Exporting environment variables"
    environment_variables =  %x[#{"eb printenv"}].split("\n")
    if environment_variables.empty? && !system("eb printenv")
      say "eb printenv command error"
      return false
    end

    environment_variables.shift

    begin
      envvar_strings = []
      self.previous_envvars = Hash.new
      environment_variables.each do |environment_variable|
        environment_variable.gsub!(/\s+/, '')
        envvar_strings << "export #{environment_variable}"
        key, value = environment_variable.split('=').map(&:to_s)
        self.previous_envvars[key] = ENV[key]
        ENV[key]   = value
      end

      result = File.open(get_environment_variables_path, 'w') do |file|
        file.write(envvar_strings.join("\n"))
      end

      File.open(get_environment_variables_override_path, 'r') do |file|
        file.each_line do |line|
          key, value = line.split(" ").last.split('=').map(&:to_s)
          self.previous_envvars[key] = ENV[key]
          ENV[key]   = value
        end
      end
    rescue
      say "Write envvar error, make sure #{get_environment_variables_path} is writable."
      return false
    end

    return true
  end

  def run_asset_precompile
    say "Running asset precompile"
    if system("cd #{get_artifact_folder_path} && bundle exec rake assets:precompile RAILS_ENV=production ")
      say "Asset precompile success"
      return true
    end
    return false
  end

  def deploy_application(version=nil)
    say "Deploying application"
    command = "eb deploy --quiet #{"--label #{version}" if version != nil}"
    if system command
      return true
    else
      sleep 2
      `eb status`.split("\n").map{|a| a.strip}.each do |row|
        if row.start_with?('Status:') && !row.include?('Updating')
          say "After deploy status is not updating. Please check deployment status manually and run `#{command.gsub('--quiet', '')}` if needed"
          return false
        end
      end
      return true
    end
    say "Deploy application failed"
    return false
  end

  def run_bundle_install
    say "Running bundle install"
    if system("cd #{get_artifact_folder_path} && bundle install")
      # successfully run bundle install
      return true
    end
    say "Bundle error"
    return false
  end

  def say_last_n_lines(lines, n)
    lines.split("\n").pop(n).each do |line|
      say line
    end
  end

  def zip_artifact
    say "Zipping artifact"
    if Pathname.new("#{get_config_folder}/#{self.artifact_file}").exist?
      system("rm #{get_config_folder}/#{self.artifact_file}")
    end

    if system "cd #{get_config_folder}/#{self.artifact_folder} && zip -r ../#{self.artifact_file} *"
      return true
    end
    say "Zipping error"
    return false
  end

  def read_config_file
    if Pathname.new(get_config_file_path).exist?
      self.config = JSON.parse(File.read(get_config_file_path))
      if !`eb list`.include?("* #{self.config['application_name']}")
        say "Shinkansen is set to #{self.config['application_name']}. Please check `eb list`"
        return false
      end
      return true
    end
    say "Shinkansen has not been initialized. Please run `shin init` first."
    return false
  end

  def get_proccess_lock
    if Pathname.new(get_process_lock_path).exist?
      say 'There is other shinkansen process running in this project.'
      return false
    end

    File.open(get_process_lock_path, "w") do |f|
      f.write("locking process")
    end

    return true
  end

  def remove_process_lock
    File.delete(get_process_lock_path) rescue false
  end

  def run
    program :name, "Shinkansen"
    program :version, "0.0.1"
    program :description, "Japanese Bullet Train"
    program :help, "Configuration", "is located in #{get_config_file_path}"
    program :help, "Author", "Jonathan Wylliem <jonathan.wylliem@jurnal.id>"

    command :deploy do |c|
      c.syntax = "shinkansen deploy [options]"
      c.summary = "deploy"
      c.description = "Deploy using shinkansen"
      # c.example "shin deploy --version Version  --message Message", "command example"
      # c.example "shin deploy --skip-compilation", "command example"
      c.action do |args, options|
        if !get_proccess_lock
          return 0
        end

        if !read_config_file
          return 0
        end

        deploy_version = self.config["ask_application_version"] ? ask("Deployment version:  ") : nil
        deploy_message = self.config["ask_application_version"] ? ask("Deployment message:  ") : nil
        if execute_git_pull_cmd &&
           create_deploy_artifact_data &&
           export_environment_variables &&
           run_bundle_install &&
           run_asset_precompile &&
           zip_artifact &&
           revert_environment_variables &&
           deploy_application(deploy_version)
          say "Deploying #{self.config['application_name']} #{"version #{deploy_version} " if deploy_version != nil}to elasticbeanstalk."
        else
          say "Deploy failed! Please fix bugs and deploy again."
        end
        remove_process_lock
      end
    end

    command :remove do |c|
      c.syntax = "shinkansen remove"
      c.summary = "Remove Shinkansen"
      c.description = "Remove Shinkansen "
      c.action do |args, options|
        if agree("Are you sure to remove shinkansen from this project? (yes, no)  ")
          system "rm -rf #{get_config_folder}"
        end
      end
    end

    command :init do |c|
      c.syntax = "shinkansen init"
      c.summary = "Initialize Shinkansen"
      c.description = "Initialize Shinkansen"
      c.action do |args, options|
        if read_config_file
          say "Shinkansen project existed in current directory..."
          initialize_project = agree("Do you want to override current setting? (yes, no)")
        end

        if initialize_project != false
          say "Initializing Shinkansen project..."

          setting = Hash.new.tap do |h|
            say "Fill application name according to active Elasticbeanstalk setting. Run `eb list` list all name."
            h["application_name"]             = ask("Elasticbeanstalk Application Name:  ")
            h["ask_application_version"]      = agree("Ask application version before deploy (yes, no):  ")
          end

          system "rm -rf #{get_config_folder} && mkdir -p #{get_config_folder}"
          system "echo '#{setting.to_json}' > #{get_config_file_path}"
          system "touch #{get_environment_variables_override_path}"

          open('.gitignore', 'a') { |f|
            f.puts "\n"
            f.puts "# Shinkansen files"
            f.puts "#{get_config_folder}/*"
            f.puts "\n"
          }

          say "Shinkansen project initialized!"
          say "Change #{get_environment_variables_override_path} to override environment variables."
        end
      end
    end

    run!
  end
end

Shinkansen.new.run if $0 == __FILE__
